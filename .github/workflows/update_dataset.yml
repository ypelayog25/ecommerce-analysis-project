name: Update Dataset and Run Analysis

on:
  workflow_dispatch:
    inputs:
      FORCE_RUN:
        description: "Force full analysis (ignore hash check)"
        required: false
        default: "true"

jobs:
  update-and-analyze:
    runs-on: ubuntu-latest

    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      FORCE_RUN: ${{ github.event.inputs.FORCE_RUN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install kaggle pandas matplotlib duckdb pyarrow requests gh

      - name: Configure Kaggle
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\", \"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Create raw data directory
        run: mkdir -p data/raw

      - name: Download dataset metadata
        run: kaggle datasets metadata nabihazahid/ecommerce-dataset-for-sql-analysis -p data/raw

      - name: Detect dataset changes or force run
        id: hash-check
        run: |
          cd data/raw
          if [ ! -f dataset-metadata.json ]; then
            echo "❌ ERROR: dataset-metadata.json not found"
            exit 1
          fi

          NEW_HASH=$(sha256sum dataset-metadata.json | cut -d " " -f1)
          OLD_HASH=$(cat .dataset_hash.txt 2>/dev/null || echo "")

          echo "OLD_HASH=$OLD_HASH"
          echo "NEW_HASH=$NEW_HASH"

          if [[ "$FORCE_RUN" == "true" || "$NEW_HASH" != "$OLD_HASH" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Download dataset if changed or forced
        if: steps.hash-check.outputs.changed == 'true'
        run: kaggle datasets download -d nabihazahid/ecommerce-dataset-for-sql-analysis -p data/raw --unzip

      - name: Run analysis script
        if: steps.hash-check.outputs.changed == 'true'
        run: python src/step5_analysis_sql.py

      - name: Update dataset hash
        if: steps.hash-check.outputs.changed == 'true'
        run: |
          NEW_HASH=$(sha256sum data/raw/dataset-metadata.json | cut -d " " -f1)
          echo "$NEW_HASH" > data/raw/.dataset_hash.txt

      - name: Update CHANGELOG.md
        if: steps.hash-check.outputs.changed == 'true'
        run: |
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          echo "## $DATE - Automated dataset update and analysis" >> CHANGELOG.md
          echo "- Reports updated automatically based on dataset changes" >> CHANGELOG.md

      - name: Commit changes to new branch
        if: steps.hash-check.outputs.changed == 'true'
        id: commit-updates
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          BRANCH="auto/update-reports-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH
          git add data/raw/.dataset_hash.txt reports/ CHANGELOG.md
          git commit -m "chore: update reports and changelog after dataset analysis"
          git push origin $BRANCH
          echo "branch_name=$BRANCH" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.hash-check.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.commit-updates.outputs.branch_name }}
          base: main
          title: "Update Dataset and Reports"
          body: "Automated PR: update reports and changelog after dataset analysis"
          labels: automated,dataset-update
          draft: false

      - name: Auto-merge PR if no conflicts
        if: steps.hash-check.outputs.changed == 'true'
        run: |
          PR_NUMBER=$(gh pr list --head ${{ steps.commit-updates.outputs.branch_name }} --json number -q '.[0].number')
          if [ "$PR_NUMBER" != "null" ]; then
            STATUS=$(gh pr view $PR_NUMBER --json mergeable -q '.mergeable')
            if [ "$STATUS" == "MERGEABLE" ]; then
              gh pr merge $PR_NUMBER --merge --admin
              echo "✅ PR merged automatically"
            else
              echo "⚠️ PR has conflicts, merge skipped"
            fi
          else
            echo "No PR found to merge"

      - name: Create semver patch tag
        if: steps.hash-check.outputs.changed == 'true'
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG//v/}"
          PATCH=$((PATCH+1))
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "✅ New version tag created: $NEW_TAG"
